<?php

/**
 * @file
 * Fraction
 */

/***************************************************************
 * Drupal hooks
 * *************************************************************/

/**
 * Implements of hook_field_info().
 */
function fraction_field_info() {
  return array(
    'fraction' => array(
      'label' => t('Fraction'),
      'description' => t('This field stores a decimal in fraction form (with a numerator and denominator) for maximum precision.'),
      'settings' => array(),
      'instance_settings' => array(),
      'default_widget' => 'fraction_default',
      'default_formatter' => 'fraction_default',
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function fraction_field_is_empty($item, $field) {
  return empty($item['numerator']) || empty($item['denominator']);
}

/**
 * Implements of hook_field_info().
 */
function fraction_field_widget_info() {
  return array(
    'fraction_default' => array(
      'label' => t('Numerator and denominator'),
      'field types' => array('fraction'),
      'settings' => array(),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function fraction_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $numerator = isset($items[$delta]['numerator']) ? $items[$delta]['numerator'] : '';
  $denominator = isset($items[$delta]['denominator']) ? $items[$delta]['denominator'] : '';

  switch ($instance['widget']['type']) {

    // Default fraction widget: two textfields (numerator and denominator).
    case 'fraction_default':
      $element['#type'] = 'fieldset';
      $element['numerator'] = array(
        '#type' => 'textfield',
        '#title' => t('Numerator'),
        '#default_value' => $numerator,
        '#element_validate' => array('element_validate_integer_positive'),
        '#size' => 15,
      );
      $element['denominator'] = array(
        '#type' => 'textfield',
        '#title' => t('Denominator'),
        '#default_value' => $denominator,
        '#element_validate' => array('element_validate_integer_positive'),
        '#size' => 15,
      );
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function fraction_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'fraction':
      form_error($element, $error['message']);
      break;
  }
}

/**
 * Implements of hook_field_info().
 */
function fraction_field_formatter_info() {
  return array(
    'fraction_default' => array(
      'label' => t('Fraction'),
      'field types' => array('fraction'),
      'settings' => array(),
    ),
    'fraction_fixed' => array(
      'label' => t('Fixed precision'),
      'field types' => array('fraction'),
      'settings' => array('precision' => 2),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function fraction_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';

  if ($display['type'] == 'fraction_fixed') {
    $summary = t('Precision: @precision', array('@precision' => $settings['precision']));
  }

  return $summary;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function fraction_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  if ($display['type'] == 'fraction_fixed') {
    $element['precision'] = array(
      '#type' => 'textfield',
      '#title' => t('Decimal precision'),
      '#description' => t('Specify the number of digits after the decimal place to display.'),
      '#default_value' => $settings['precision'],
      '#required' => TRUE,
      '#element_validate' => array('element_validate_integer_positive'),
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_view().
 */
function fraction_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];
  $element = array();

  switch ($display['type']) {

    // This formatter simply outputs the field as a fraction ([numerator]/[denominator]).
    case 'fraction_default':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#type' => 'markup',
          '#markup' => $item['numerator'] . '/' . $item['denominator'],
        );
      }
      break;

    // This formatter outputs the field as a decimal value with a fixed precision.
    case 'fraction_fixed':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#type' => 'markup',
          '#markup' => fraction_to_decimal($item['numerator'], $item['denominator'], $settings['precision']),
        );
      }
      break;
  }

  return $element;
}

/***************************************************************
 * Utility functions
 * *************************************************************/

/**
 * Convert a fraction to a decimal with a fixed precision.
 *
 * @param $numerator
 *   The fraction's numerator.
 * @param $denominator
 *   The fraction's denominator.
 * @param $precision
 *   The number of decimal places to include in the returned value.
 *
 * @return
 *   Returns a string value representing the fraction in decimal form.
 *
 */
function fraction_to_decimal($numerator, $denominator, $precision = 2) {
  return round($numerator / $denominator, $precision);
}

/**
 * Convert a decimal value into a numerator and denominator.
 *
 * @param $value
 *   The decimal value to be converted.
 *
 * @return
 *   An array with 'numerator' and 'denominator' keys.
 */
function fraction_from_decimal($value) {

  // Calculate the precision by counting the number of decimal places.
  $precision = drupal_strlen(drupal_substr(strrchr($value, '.'), 1));

  // Create the denominator by raising 10 to the power of the precision.
  $fraction['denominator'] = pow(10, $precision);

  // Calculate the numerator by multiplying the value by the denominator.
  $fraction['numerator'] = $value * $fraction['denominator'];

  return $fraction;
}
