<?php

/**
 * @file
 * Fraction
 */

/***************************************************************
 * Drupal hooks
 * *************************************************************/

/**
 * Implements of hook_field_info().
 */
function fraction_field_info() {
  return array(
    'fraction' => array(
      'label' => t('Fraction'),
      'description' => t('This field stores a decimal in fraction form (with a numerator and denominator) for maximum precision.'),
      'settings' => array(),
      'instance_settings' => array(),
      'default_widget' => 'fraction_default',
      'default_formatter' => 'fraction_default',
    ),
  );
}


/**
 * Implements hook_field_validate().
 */
function fraction_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {

}


/**
 * Implements hook_field_is_empty().
 */
function fraction_field_is_empty($item, $field) {
  return empty($item['numerator']) || empty($item['denominator']);
}

/**
 * Implements of hook_field_info().
 */
function fraction_field_widget_info() {
  return array(
    'fraction_default' => array(
      'label' => t('Numerator and denominator'),
      'field types' => array('fraction'),
      'settings' => array(),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements of hook_field_info().
 */
function fraction_field_formatter_info() {
  return array(
    'fraction_default' => array(
      'label' => t('Fraction'),
      'field types' => array('fraction'),
      'settings' => array(),
    ),
    'fraction_fixed' => array(
      'label' => t('Fixed precision'),
      'field types' => array('fraction'),
      'settings' => array('precision' => 2),
    ),
  );
}

/***************************************************************
 * Utility functions
 * *************************************************************/

/**
 * Convert a fraction to a decimal with a fixed precision.
 *
 * @param $numerator
 *   The fraction's numerator.
 * @param $denominator
 *   The fraction's denominator.
 * @param $precision
 *   The number of decimal places to include in the returned value.
 *
 * @return
 *   Returns a string value representing the fraction in decimal form.
 *
 */
function fraction_to_decimal($numerator, $denominator, $precision = 2) {
  return round($numerator / $denominator, $precision);
}

/**
 * Convert a decimal value into a numerator and denominator.
 *
 * @param $value
 *   The decimal value to be converted.
 *
 * @return
 *   An array with 'numerator' and 'denominator' keys.
 */
function fraction_from_decimal($value) {

  // Calculate the precision by counting the number of decimal places.
  $precision = drupal_strlen(drupal_substr(strrchr($value, '.'), 1));

  // Create the denominator by raising 10 to the power of the precision.
  $fraction['denominator'] = pow(10, $precision);

  // Calculate the numerator by multiplying the value by the denominator.
  $fraction['numerator'] = $value * $fraction['denominator'];

  return $fraction;
}
