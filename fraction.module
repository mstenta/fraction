<?php

/**
 * @file
 * Fraction
 */

/***************************************************************
 * Constants
 * *************************************************************/

// Default decimal precision.
define('FRACTION_DEFAULT_PRECISION', 2);

/***************************************************************
 * Drupal hooks
 * *************************************************************/

/**
 * Implements of hook_field_info().
 */
function fraction_field_info() {
  return array(
    'fraction' => array(
      'label' => t('Fraction'),
      'description' => t('This field stores a decimal in fraction form (with a numerator and denominator) for maximum precision.'),
      'settings' => array(),
      'instance_settings' => array(),
      'default_widget' => 'fraction_default',
      'default_formatter' => 'fraction_default',
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function fraction_field_is_empty($item, $field) {
  return empty($item['numerator']) || empty($item['denominator']);
}

/**
 * Implements of hook_field_info().
 */
function fraction_field_widget_info() {
  return array(
    'fraction_default' => array(
      'label' => t('Numerator and denominator'),
      'field types' => array('fraction'),
      'settings' => array(),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
    'fraction_decimal' => array(
      'label' => t('Decimal'),
      'field types' => array('fraction'),
      'settings' => array('precision' => 2),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function fraction_field_widget_settings_form($field, $instance) {
  $form = array();
  $widget = $instance['widget'];
  $defaults = field_info_widget_settings($widget['type']);
  $settings = array_merge($defaults, $widget['settings']);

  if ($widget['type'] == 'fraction_decimal') {
    $form['precision'] = array(
      '#type' => 'textfield',
      '#title' => t('Precision'),
      '#description' => t('Specify the number of digits after the decimal place to display when converting the fraction to a decimal.'),
      '#default_value' => $settings['precision'],
    );
  }

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function fraction_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $numerator = isset($items[$delta]['numerator']) ? $items[$delta]['numerator'] : '';
  $denominator = isset($items[$delta]['denominator']) ? $items[$delta]['denominator'] : '';

  $settings = $instance['widget']['settings'];

  switch ($instance['widget']['type']) {

    // Default fraction widget: two textfields (numerator and denominator).
    case 'fraction_default':
      $element['#type'] = 'fieldset';
      $element['numerator'] = array(
        '#type' => 'textfield',
        '#title' => t('Numerator'),
        '#default_value' => $numerator,
        '#element_validate' => array('element_validate_integer'),
        '#size' => 15,
      );
      $element['denominator'] = array(
        '#type' => 'textfield',
        '#title' => t('Denominator'),
        '#default_value' => $denominator,
        '#element_validate' => array('element_validate_integer_positive'),
        '#size' => 15,
      );
      break;

    // Decimal widget: a single textfield that accepts a decimal number.
    case 'fraction_decimal':
      $element += array(
        '#type' => 'fieldset',
        '#element_validate' => array('_fraction_decimal_widget_validate'),
      );
      $element['value'] = array(
        '#type' => 'textfield',
        '#default_value' => fraction_to_decimal($numerator, $denominator, $settings['precision']),
        '#element_validate' => array('element_validate_number'),
        '#size' => 15,
      );
      break;
  }

  return $element;
}

/**
 * Validation function for the fraction_decimal widget to convert the decimal to a fraction.
 */
function _fraction_decimal_widget_validate($element, &$form_state) {

  // Search through the form values to find the current field value.
  $parents = $element['#parents'];
  array_pop($parents);
  $values = drupal_array_get_nested_value($form_state['values'], $parents);

  // Convert the value to a fraction.
  $fraction = fraction_from_decimal($values[0]['value']);

  // Set the numerator and denominator values for the form.
  form_set_value($element, $fraction, $form_state);
}

/**
 * Implements hook_field_widget_error().
 */
function fraction_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'fraction':
      form_error($element, $error['message']);
      break;
  }
}

/**
 * Implements of hook_field_info().
 */
function fraction_field_formatter_info() {
  return array(
    'fraction_default' => array(
      'label' => t('Fraction'),
      'field types' => array('fraction'),
      'settings' => array('separator' => '/'),
    ),
    'fraction_decimal' => array(
      'label' => t('Decimal'),
      'field types' => array('fraction'),
      'settings' => array('precision' => 2),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function fraction_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';

  if ($display['type'] == 'fraction_default') {
    $summary = t('Separator: @separator', array('@separator' => $settings['separator']));
  }

  elseif ($display['type'] == 'fraction_decimal') {
    $summary = t('Precision: @precision', array('@precision' => $settings['precision']));
  }

  return $summary;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function fraction_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  if ($display['type'] == 'fraction_default') {

    // Numerator and denominator separator.
    $element['separator'] = array(
      '#type' => 'textfield',
      '#title' => t('Separator'),
      '#description' => t('Specify the separator to display between the numerator and denominator.'),
      '#default_value' => $settings['separator'],
      '#required' => TRUE,
    );
  }

  elseif ($display['type'] == 'fraction_decimal') {

    // Decimal precision.
    $element['precision'] = array(
      '#type' => 'textfield',
      '#title' => t('Decimal precision'),
      '#description' => t('Specify the number of digits after the decimal place to display.'),
      '#default_value' => $settings['precision'],
      '#required' => TRUE,
      '#element_validate' => array('element_validate_integer_positive'),
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_view().
 */
function fraction_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];
  $element = array();

  switch ($display['type']) {

    // This formatter simply outputs the field as a fraction ([numerator]/[denominator]).
    case 'fraction_default':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#type' => 'markup',
          '#markup' => $item['numerator'] . $settings['separator'] . $item['denominator'],
        );
      }
      break;

    // This formatter outputs the field as a decimal value with a fixed precision.
    case 'fraction_decimal':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#type' => 'markup',
          '#markup' => fraction_to_decimal($item['numerator'], $item['denominator'], $settings['precision']),
        );
      }
      break;
  }

  return $element;
}

/***************************************************************
 * Views API hooks
 * *************************************************************/

/**
 * Implements hook_views_api().
 */
function fraction_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'fraction') . '/views',
  );
}

/***************************************************************
 * Utility functions
 * *************************************************************/

/**
 * Convert a fraction to a decimal with a fixed precision.
 *
 * @param $numerator
 *   The fraction's numerator.
 * @param $denominator
 *   The fraction's denominator.
 * @param $precision
 *   The number of decimal places to include in the returned value.
 *
 * @return
 *   Returns a string value representing the fraction in decimal form.
 *   Returns zero if the denominator is empty.
 */
function fraction_to_decimal($numerator, $denominator, $precision = FRACTION_DEFAULT_PRECISION) {
  if (!empty($denominator)) {

    // Divide the numerator by the denominator (using bcmath if available).
    if (function_exists('bcdiv')) {
      return fraction_bcround(bcdiv($numerator, $denominator, $precision), $precision);
    }
    else {
      return round($numerator / $denominator, $precision);
    }
  }
  else {
    return 0;
  }
}

/**
 * Convert a decimal value into a numerator and denominator.
 *
 * @param $value
 *   The decimal value to be converted.
 *
 * @return
 *   An array with 'numerator' and 'denominator' keys.
 */
function fraction_from_decimal($value) {

  // Calculate the precision by counting the number of decimal places.
  $precision = drupal_strlen(drupal_substr(strrchr($value, '.'), 1));

  // Create the denominator by raising 10 to the power of the precision.
  if (function_exists('bcpow')) {
    $denominator = bcpow(10, $precision);
  }
  else {
    $denominator = pow(10, $precision);
  }

  // Calculate the numerator by multiplying the value by the denominator.
  if (function_exists('bcmul')) {
    $numerator = bcmul($value, $denominator);
  }
  else {
    $numerator = $value * $denominator;
  }

  // Return the numerator and denominator in an array.
  return array(
    'numerator' => $numerator,
    'denominator' => $denominator,
  );
}

/**
 * Function for rounding decimals that are represented as strings (such as those returned
 * from bcmath functions).
 *
 * @param $number
 *   The number to round.
 * @param $precision
 *   The number of decimal places to round to.
 *
 * @return
 *   Returns the rounded number as a string.
 */
function fraction_bcround($number, $precision = 0) {
  if ($number[0] != '-') {
    return bcadd($number, '0.' . str_repeat('0', $precision) . '5', $precision);
  }
  return bcsub($number, '0.' . str_repeat('0', $precision) . '5', $precision);
}

